.686
.model flat,stdcall
.stack 100h
.data
arr_x dd 0.0 ;инициализация данных
	  dd 0.0
	  dd 4.0

arr_y dd 0.0
	  dd 3.0
	  dd 0.0

arr_len dd 0.0
		dd 0.0
		dd 0.0
answer dd 0.0
temp dd 0.0
operator dd -1.0
.code
ExitProcess PROTO STDCALL :DWORD
Start:
	finit;инициализация сопроцессора
	fld temp;помещаем ноль в st(0), далее он переместится в st(1)

	;считаем длину первого вектора
	fld arr_x[0*4];помещаем в st(0) x1
	fsub arr_x[1*4];вычитаем из st(0) x2
	fst temp;помещаем результат в temp
	fmul temp;возводим в квадрат st(0)
	fstp arr_len[0*4];помещаем длину вектора в первый элемент массива

	fld arr_y[0*4];помещаем в st(0) y1
	fsub arr_y[1*4];вычитаем из st(0) y2
	fst temp;помещаем результат в temp
	fmul temp;возводим в квадрат st(0)
	fadd arr_len[0*4];складываем st(0) и длину вектора из первого элемента массива
	fstp arr_len[0*4];помещаем значение из st(0) в первый элемент массива

	;считаем длину второго вектора
	fld arr_x[1*4];помещаем в st(0) x2
	fsub arr_x[2*4];вычитаем из st(0) x3
	fst temp;помещаем результат в temp
	fmul temp;возводим в квадрат st(0)
	fstp arr_len[1*4];помещаем длину вектора во второй элемент массива

	fld arr_y[1*4];помещаем в st(0) y2
	fsub arr_y[2*4];вычитаем из st(0) y3
	fst temp;помещаем результат в temp
	fmul temp;возводим в квадрат st(0)
	fadd arr_len[1*4];складываем st(0) и длину вектора из второго элемента массива
	fstp arr_len[1*4];помещаем значение из st(0) во второй элемент массива

	;считаем длину третьего вектора
	fld arr_x[0*4];помещаем в st(0) x1
	fsub arr_x[2*4];вычитаем из st(0) x3
	fst temp;помещаем результат в temp
	fmul temp;возводим в квадрат st(0)
	fstp arr_len[2*4];помещаем длину вектора в третий элемент массива

	fld arr_y[0*4];помещаем в st(0) y1
	fsub arr_y[2*4];вычитаем из st(0) y3
	fst temp;помещаем результат в temp
	fmul temp;возводим в квадрат st(0)
	fadd arr_len[2*4];складываем st(0) и длину вектора из третьего элемента массива
	fstp arr_len[2*4];помещаем значение из st(0) в третий элемент массива

	;считаем результат

	fld arr_len[0*4];помещаем в st(0) длину первого вектора
	fmul operator;делаем st(0) отрицательным
	fadd arr_len[1*4];прибавляем длину второго вектора
	fadd arr_len[2*4];прибавляем длину третьего вектора
	
	fcomi st, st(1);сравниваем st(0) с нулём
	je L1;если сумма векторов равна нулю, то переходим к метке L1
	fstp temp;снимаем st(0) со стека

	fld arr_len[1*4];помещаем в st(0) длину второго вектора
	fmul operator;делаем st(0) отрицательным
	fadd arr_len[2*4];прибавляем длину третьего вектора
	fadd arr_len[0*4];прибавляем длину первого вектора

	fcomi st, st(1);сравниваем st(0) с нулём
	je L1;если сумма векторов равна нулю, то переходим к метке L1
	fstp temp;снимаем st(0) со стека

	fld arr_len[2*4];помещаем в st(0) длину третьего вектора
	fmul operator;делаем st(0) отрицательны
	fadd arr_len[0*4];прибавляем длину первого вектора
	fadd arr_len[1*4];прибавляем длину второго вектора

	fcomi st, st(1);сравниваем st(0) с нулём
	je L1;если сумма векторов равна нулю, то переходим к метке L1
	fstp temp;снимаем st(0) со стека

	mov answer, -1; -1 значит, что треугольник не прямоугольный
	jmp L2;заканчиваем программу

	L1:
		;если мы попали сюда, то треугольник прямоугольный
		fstp answer;answer = 0.0, то есть c^2 = a^2 + b^2. треугольник прямоугольный
		fstp temp;
	L2:
		;конец программы
exit:
Invoke ExitProcess,1
End Start
